- name: Uninstalling previous 'slurm' package
  become: yes
  package:
        name: slurm
        state: absent

- name: Making sure slurm is properly uninstalled
  shell: command -v sinfo
  register: check_slurm_version
  failed_when: check_slurm_version.stdout != ''

- name: Install Slurm Dependencies
  become: yes
  package:
        name: "{{ item }}"
        state: "latest"
  with_items:
        - gcc
        - make
        - build-essential
        - dpkg
        - ruby-dev
        - libssl-dev
        - libmariadbclient-dev 
        - libpam0g-dev
        - munge
        - libmunge2
        - libmunge-dev

- name: Install fpm package
  become: yes
  gem:
        name: fpm
        state: latest
        user_install: no


################### SLURM ######################

- name: Downloading Slurm Sources
  get_url:
        url: "http://download.schedmd.com/slurm/slurm-{{ slurm_version }}.tar.bz2"
        dest: "/tmp/slurm-{{ slurm_version }}.tar.bz2"
  register: slurm_source

- name: Check if Unpacked slurm-{{ slurm_version }} folder already exists
  stat:
        path: "/tmp/slurm-{{ slurm_version }}"
  register: source_slurm_unpack_stat
  changed_when: source_slurm_unpack_stat.stat.exists == False

- name: Unpacking Slurm Source
  unarchive:
        copy: no
        dest: /tmp/
        src: "{{ slurm_source.dest }}"
  when: slurm_source.changed or source_slurm_unpack_stat.changed
  register: slurm_source_unpack

- name: Configuring Slurm Source
  become: yes
  command: ./configure --sysconfdir={{ slurm_config_dir}} --prefix=/usr --enable-deprecated  # remove enable-deprecated (only for rapsberrypi 32 bits)
  args:
        chdir: "/tmp/slurm-{{ slurm_version }}"
  register: slurm_configure
  failed_when: (slurm_configure.rc not in [0, 1])

- name: Compile and Install Slurm
  become: yes
  shell: make && make install DESTDIR=/tmp/slurm-build
  args:
        chdir: "/tmp/slurm-{{ slurm_version }}"
  register: slurm_make
  failed_when: (slurm_make.rc not in [0, 1])

- name: Creates directory
  file:
        path: /tmp/slurm-build/usr/lib/systemd/system/
        state: directory
        recurse: yes

- name: Copy Service Files
  become: yes
  copy: src={{ item.src }} dest={{ item.dest }} remote_src=yes mode=644
  with_items:
        - { src: '/tmp/slurm-{{ slurm_version }}/etc/slurmd.service', dest: '/tmp/slurm-build/usr/lib/systemd/system/' }
        - { src: '/tmp/slurm-{{ slurm_version }}/etc/slurmdbd.service', dest: '/tmp/slurm-build/usr/lib/systemd/system/' }
        - { src: '/tmp/slurm-{{ slurm_version }}/etc/slurmctld.service', dest: '/tmp/slurm-build/usr/lib/systemd/system/' }

- name: Build Slurm Debian Package
  command: fpm -s dir -t deb -v {{ slurm_version }} -n  slurm --prefix=/usr -C /tmp/slurm-build/usr .
  args:
        chdir: "/tmp" 
  register: slurm_deb
  failed_when: (slurm_deb.rc not in [0, 1])

- name: Getting System Architecture
  shell: dpkg --print-architecture
  register: architecture

- name: Install Slurm Debian package
  become: yes
  command: dpkg -i slurm_{{ slurm_version }}_{{ architecture.stdout }}.deb
  args:
        chdir: "/tmp"
  register: slurm_install
  failed_when: (slurm_install.rc not in [0, 1])
